pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Evgeny-Nik/project_kubernetes_jenkins_docker_ci_cd.git'
        GIT_BRANCH = 'master'
        GIT_CRED_ID = 'kubernetes_jenkins_docker_github_user_token'
        DOCKERHUB_USER = credentials('dockerhub_username')
        DOCKERHUB_PASS = credentials('dockerhub_password')
        VERSION_FILE = 'version.txt'
        TEST_FILE = 'tests/website_connectivity_unittest.py'
        APP_DIR = 'weather_app'
        MANIFEST_DIR = 'k8s_files'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                sh '''
                    docker 2>/dev/null rm -f $(docker ps -aq) || true 
                    docker 2>/dev/null rmi $(docker images -aq) || true
                '''
            }
        }

        stage('Prep Workspace') {
            steps {
                git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CRED_ID}", url: "${GIT_REPO}"
                dir(APP_DIR) {
                    withCredentials([file(credentialsId: '.env-file', variable: 'ENV_FILE')]) {
                        writeFile file: '.env', text: readFile(ENV_FILE)
                    }
                }
            }
        }

        stage('Increment Version') {
            steps {
                script {
                    dir(APP_DIR) {
                        def version = readFile(VERSION_FILE).trim()
                        def (major, minor, patch) = version.tokenize('.').collect { it.toInteger() }
                        patch += 1
                        def newVersion = "${major}.${minor}.${patch}"
                        writeFile file: VERSION_FILE, text: newVersion
                        env.NEW_VERSION = newVersion
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir(APP_DIR) {
                    sh """
                        docker build -t ${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION} .
                        docker tag ${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION} ${DOCKERHUB_USER}/kubernetes_weather_app:latest
                        docker images
                    """
                }
            }
        }

        stage('Test Application') {
            steps {
                dir(APP_DIR) {
                    sh """
                        docker run -d --name test_container -p 8000:8000 ${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION}
                        sleep 10
                        python3 ${TEST_FILE}
                        docker stop test_container
                        docker rm test_container
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh """
                    echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin
                    docker push ${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION}
                    docker push ${DOCKERHUB_USER}/kubernetes_weather_app:latest
                    docker logout
                """
            }
        }

       stage('Edit Manifest Files') {
            steps {
                script {
                    dir(MANIFEST_DIR) {
                        withCredentials([usernamePassword(credentialsId: "${GIT_CRED_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            def deployment = readYaml file: 'deployment.yaml'
                            deployment.spec.template.spec.containers[0].image = "${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION}"
                            writeYaml file: 'deployment.yaml', data: deployment

                            sh """
                                git add deployment.yaml
                                git commit -m "Update image tag in deployment.yaml to ${DOCKERHUB_USER}/kubernetes_weather_app:${NEW_VERSION}"
                                git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Evgeny-Nik/project_kubernetes_jenkins_docker_ci_cd.git ${GIT_BRANCH}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            withCredentials([usernamePassword(credentialsId: "${GIT_CRED_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                dir(APP_DIR) {
                    sh """
                        git add ${VERSION_FILE}
                        git commit -m "Increment version to ${newVersion}"
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Evgeny-Nik/project_kubernetes_jenkins_docker_ci_cd.git ${GIT_BRANCH}
                    """
                }
            }
        }
}